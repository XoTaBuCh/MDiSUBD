-- Database: mdisubd

DROP DATABASE IF EXISTS mdisubd WITH (FORCE);

CREATE DATABASE mdisubd
    WITH
    OWNER = postgres
    ENCODING = 'UTF8'
    LC_COLLATE = 'Russian_Russia.1251'
    LC_CTYPE = 'Russian_Russia.1251'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1
    IS_TEMPLATE = False;
	
CREATE EXTENSION pgcrypto;
	
CREATE TABLE IF NOT EXISTS account_statuses(
	id SMALLSERIAL PRIMARY KEY,
	name VARCHAR(255) NOT NULL UNIQUE	
);

CREATE TABLE IF NOT EXISTS medicine_types(
	id SMALLSERIAL PRIMARY KEY,
	name VARCHAR(255) NOT NULL UNIQUE	
);

CREATE TABLE IF NOT EXISTS order_statuses(
	id SMALLSERIAL PRIMARY KEY,
	name VARCHAR(255) NOT NULL UNIQUE	
);

CREATE TABLE IF NOT EXISTS users(
	id BIGSERIAL PRIMARY KEY,
	name VARCHAR(255) NOT NULL,
	number VARCHAR(255),
	email VARCHAR(255) NOT NULL UNIQUE,
	password TEXT NOT NULL,
	status_id SMALLSERIAL,
	CONSTRAINT fk_status FOREIGN KEY(status_id) REFERENCES account_statuses(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS user_actions(
	id BIGSERIAL PRIMARY KEY,
	user_id BIGSERIAL,
	name VARCHAR(500) NOT NULL,
	time timestamp,
	CONSTRAINT fk_user FOREIGN KEY(user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS clients(
	id BIGSERIAL PRIMARY KEY,
	user_id BIGSERIAL,
	CONSTRAINT fk_user FOREIGN KEY(user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS apothecaries(
	id BIGSERIAL PRIMARY KEY,
	user_id BIGSERIAL,
	CONSTRAINT fk_user FOREIGN KEY(user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS admins(
	id BIGSERIAL PRIMARY KEY,
	user_id BIGSERIAL,
	CONSTRAINT fk_user FOREIGN KEY(user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS addresses(
	id BIGSERIAL PRIMARY KEY,
	country VARCHAR(255) NOT NULL,
	city VARCHAR(255) NOT NULL,
	street_address VARCHAR(255) NOT NULL,
	lat numeric NOT NULL,
	lon numeric NOT NULL
);

CREATE TABLE IF NOT EXISTS pharmacies(
	id BIGSERIAL PRIMARY KEY,
	name VARCHAR(255) NOT NULL,
	address_id BIGSERIAL,
	apothecary_id BIGSERIAL,
	CONSTRAINT fk_apothecary FOREIGN KEY(apothecary_id) REFERENCES apothecaries(id) ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT fk_address FOREIGN KEY(address_id) REFERENCES addresses(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS medicines(
	id BIGSERIAL PRIMARY KEY,
	name VARCHAR(255) NOT NULL,
	type_id SMALLSERIAL,
	fabricator VARCHAR(255) NOT NULL,
	description VARCHAR(500) NOT NULL,
	CONSTRAINT fk_type FOREIGN KEY(type_id) REFERENCES medicine_types(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS products(
	id BIGSERIAL PRIMARY KEY,
	medicine_id BIGSERIAL,
	pharmacy_id BIGSERIAL,
	price money NOT NULL CHECK(price>=0),
	amount BIGSERIAL NOT NULL CHECK(amount>=0),
	CONSTRAINT fk_pharmacy FOREIGN KEY(pharmacy_id) REFERENCES pharmacies(id) ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT fk_medicicne FOREIGN KEY(medicine_id) REFERENCES medicines(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS orders(
	id BIGSERIAL PRIMARY KEY,
	status_id SMALLSERIAL,
	client_id BIGSERIAL,
	price money NOT NULL CHECK(price>=0),
	CONSTRAINT fk_status FOREIGN KEY(status_id) REFERENCES order_statuses(id) ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT fk_client FOREIGN KEY(client_id) REFERENCES clients(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS products_orders(
	id BIGSERIAL PRIMARY KEY,
	product_id BIGSERIAL,
	order_id BIGSERIAL,
	CONSTRAINT fk_product FOREIGN KEY(product_id) REFERENCES products(id) ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT fk_order FOREIGN KEY(order_id) REFERENCES orders(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS reviews(
	id BIGSERIAL PRIMARY KEY,
	client_id BIGSERIAL,
	pharmacy_id BIGSERIAL,
	message VARCHAR(500) NOT NULL,
	CONSTRAINT fk_client FOREIGN KEY(client_id) REFERENCES clients(id) ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT fk_pharmacy FOREIGN KEY(pharmacy_id) REFERENCES pharmacies(id) ON UPDATE CASCADE ON DELETE CASCADE
);